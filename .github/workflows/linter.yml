name: Run Linter

on:
  pull_request:

concurrency:
  group: linter-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_LINTER_DEPENDENCY_IMAGE_NAME: ghcr.io/genspectrum/lapis-silo-linter-dependencies

jobs:
  linterDependencies:
    name: Build linter dependencies
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Generate dependency files hash
        id: files-hash
        run: |
          DIR_HASH=$(echo -n ${{ hashFiles('conanfile.py', 'conanprofile.docker', '.github/workflows/linter.yml', './Dockerfile_linter_dependencies') }})
          echo "DIR_HASH=$DIR_HASH" >> $GITHUB_ENV

      - name: Docker metadata
        id: dockerMetadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_LINTER_DEPENDENCY_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=${{ env.DIR_HASH }}
            type=sha,format=long,prefix=commit-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image exists
        id: check-image
        run: |
          EXISTS=$(docker manifest inspect ${{ env.DOCKER_LINTER_DEPENDENCY_IMAGE_NAME }}:${{ env.DIR_HASH }} > /dev/null 2>&1 && echo "true" || echo "false")
          echo "CACHE_HIT=$EXISTS" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        if: env.CACHE_HIT == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Build linter dependencies image
        if: env.CACHE_HIT == 'false'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.dockerMetadata.outputs.tags }}
          file: ./Dockerfile_linter_dependencies
          cache-from: type=gha,ref=linter-dependencies-image-cache-${{ hashFiles('conanfile.py', 'Dockerfile_linter') }}
          cache-to: type=gha,mode=min,ref=linter-dependencies-image-cache-${{ hashFiles('conanfile.py', 'Dockerfile_linter') }}

      - name: Retag and push existing image if cache hit
        if: env.CACHE_HIT == 'true'
        run: |
          TAGS=(${{ steps.dockerMetadata.outputs.tags }})
          for TAG in "${TAGS[@]}"; do
            docker buildx imagetools create --tag $TAG ${{ env.DOCKER_LINTER_DEPENDENCY_IMAGE_NAME }}:${{ env.DIR_HASH }}
          done

  linter:
    name: Build And Run linter
    needs: linterDependencies
    runs-on: ubuntu-latest
    env:
      PR_NUMBER: ${{ github.event.number }}
    container:
      image: ghcr.io/genspectrum/lapis-silo-linter-dependencies:commit-${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - shell: bash
        name: Configure and run clang-tidy on changed files
        run: |
          mv /src/build .
          cmake -DBUILD_WITH_CLANG_TIDY=on -D CMAKE_BUILD_TYPE=Debug -B build
          echo "Successfully configured cmake"
          files=$(curl -s \
           "https://api.github.com/repos/${{ github.repository }}/pulls/${PR_NUMBER}/files" \
           | jq -r '.[] | select(.status != "removed") | .filename')
          echo "Changed files of this PR:"
          echo "$files"
          IFS=$'\n'
          for file in $files; do
            echo "Check ending for file: $file"
            if [[ $file == *.cpp ]]; then
              echo "Now linting the file: $file"
              echo "cmake --build build --target ${file%.cpp}.o"
              cmake --build build --target ${file%.cpp}.o
            fi
          done

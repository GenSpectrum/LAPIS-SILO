on:
  [pull_request]

concurrency:
  group: linter-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_LINTER_DEPENDENCY_IMAGE_NAME: ghcr.io/genspectrum/lapis-silo-linter-dependencies

jobs:
  linterDependencies:
    name: Build linter dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          echo "Github Event ${{ github.event }}"
          echo "Github Event number ${{ github.event.number }}"
          echo "github.repository_owner ${{ github.repository_owner }}"
          echo "github.repository ${{ github.repository }}"
          echo "Changed files in PR #${PR_NUMBER}:"
          $files=$(curl -s \
           "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.repository }}/pulls/${PR_NUMBER}/files" \
           | jq -r '.[].filename')
          echo "${$files}"
          echo "::set-output name=files::$files"

      - name: Generate dependency files hash
        id: files-hash
        run: |
          DIR_HASH=$(echo -n ${{ hashFiles('conanfile.py', 'conanprofile.docker', '.github/workflows/linter.yml', './Dockerfile_linter_dependencies') }})
          echo "DIR_HASH=$DIR_HASH" >> $GITHUB_ENV

      - name: Docker metadata
        id: dockerMetadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_LINTER_DEPENDENCY_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=raw,value=${{ env.DIR_HASH }}
            type=sha,format=long,prefix=commit-

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if image exists
        id: check-image
        run: |
          EXISTS=$(docker manifest inspect ${{ env.DOCKER_LINTER_DEPENDENCY_IMAGE_NAME }}:${{ env.DIR_HASH }} > /dev/null 2>&1 && echo "true" || echo "false")
          echo "CACHE_HIT=$EXISTS" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        if: env.CACHE_HIT == 'false'
        uses: docker/setup-buildx-action@v3

      - name: Build linter dependencies image
        if: env.CACHE_HIT == 'false'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.dockerMetadata.outputs.tags }}
          file: ./Dockerfile_linter_dependencies
          cache-from: type=gha,ref=linter-dependencies-image-cache-${{ hashFiles('conanfile.py', 'Dockerfile_linter') }}
          cache-to: type=gha,mode=min,ref=linter-dependencies-image-cache-${{ hashFiles('conanfile.py', 'Dockerfile_linter') }}

      - name: Retag and push existing image if cache hit
        if: env.CACHE_HIT == 'true'
        run: |
          TAGS=(${{ steps.dockerMetadata.outputs.tags }})
          for TAG in "${TAGS[@]}"; do
            docker buildx imagetools create --tag $TAG ${{ env.DOCKER_LINTER_DEPENDENCY_IMAGE_NAME }}:${{ env.DIR_HASH }}
          done

  linter:
    name: Build And Run linter
    needs: linterDependencies
    runs-on: ubuntu-latest
    container: ghcr.io/genspectrum/lapis-silo-linter-dependencies:commit-${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Get changed files
        id: changed-files1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          echo "Changed files in PR #${PR_NUMBER}:"
          $files=$(curl -s \
           "https://api.github.com/repos/${{ github.repository_owner }}/${{ github.repository }}/pulls/${PR_NUMBER}/files" \
           | jq -r '.[].filename')
          echo "${$files}"
          echo "::set-output name=files::$files"

      - name: Get list of changed files
        id: changed-files2
        run: |
          files=$(jq -r '.pull_request.files[] | select(.status == "added" or .status == "modified") | .filename' $GITHUB_EVENT_PATH)
          echo "::set-output name=files::$files"

      - name: Configure and run clang-tidy on changed files
        run: |
          mkdir -p build
          cd build
          changed_files="${{ steps.changed-files1.outputs.files }}"
          IFS=$'\n' read -d '' -r -a file_array <<< "$changed_files"
          for file in "${file_array[@]}"; do
            cmake -DCMAKE_CXX_CLANG_TIDY="clang-tidy" ..
            cmake --build . --target $(basename $file)
          done
